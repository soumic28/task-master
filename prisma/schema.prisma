// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  projects      Project[]
  tasks         Task[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  color       String?
  userId      String    
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("TODO") // TODO, IN_PROGRESS, DONE
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  order       Int       @default(0)
  projectId   String?   
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  userId      String    
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]
  subtasks    Subtask[]
  attachments Attachment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String?
  taskId    String   
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtask {
  id        String   @id @default(uuid())
  title     String
  completed Boolean  @default(false)
  taskId    String   
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  type      String
  taskId    String   
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 